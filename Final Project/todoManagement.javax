import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.io.*;

public class todoManagement extends JFrame {
    private DefaultTableModel notCompletedModel;
    private DefaultTableModel completedModel;
    private JTextField taskInput;
    private static final String FILE_NAME = "todo.txt";

    public todoManagement() {
        setTitle("To-Do List Manager");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setLocationRelativeTo(null); // Center the window

        // Panel utama untuk tabel
        JPanel mainPanel = new JPanel(new GridLayout(1, 2));
        mainPanel.setBackground(new Color(255, 255, 255)); // White background

        // Tabel untuk tugas yang belum selesai
        notCompletedModel = new DefaultTableModel(new String[]{"Not Completed"}, 0);
        JTable notCompletedTable = new JTable(notCompletedModel);
        customizeTable(notCompletedTable);
        mainPanel.add(new JScrollPane(notCompletedTable));

        // Tabel untuk tugas yang sudah selesai
        completedModel = new DefaultTableModel(new String[]{"Completed"}, 0);
        JTable completedTable = new JTable(completedModel);
        customizeTable(completedTable);
        mainPanel.add(new JScrollPane(completedTable));

        add(mainPanel, BorderLayout.CENTER);

        // Panel bawah untuk input tugas dan tombol
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BorderLayout());
        bottomPanel.setBackground(new Color(230, 230, 230)); 

        // Text field untuk input tugas
        taskInput = new JTextField();
        taskInput.setPreferredSize(new Dimension(0, 40)); 
        taskInput.setFont(new Font("SansSerif", Font.PLAIN, 16));
        taskInput.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); 
        JPanel taskInputPanel = new JPanel(new BorderLayout());
        taskInputPanel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20)); 
        taskInputPanel.add(taskInput, BorderLayout.CENTER);
        bottomPanel.add(taskInputPanel, BorderLayout.CENTER);

        // Panel untuk tombol
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(new Color(230, 230, 230)); 
        JButton addTaskButton = new JButton("Add Task");
        JButton completeTaskButton = new JButton("Complete Task");
        JButton cleanHistoryButton = new JButton("Clean History");

        // Customize buttons
        customizeButton(addTaskButton);
        customizeButton(completeTaskButton);
        customizeButton(cleanHistoryButton);

        buttonPanel.add(addTaskButton);
        buttonPanel.add(completeTaskButton);
        buttonPanel.add(cleanHistoryButton);
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(bottomPanel, BorderLayout.SOUTH);

        // Event listeners
        addTaskButton.addActionListener(e -> addTask());
        completeTaskButton.addActionListener(e -> completeTask(notCompletedTable.getSelectedRow()));
        cleanHistoryButton.addActionListener(e -> cleanHistory());

        // Load tasks from file
        loadTasks();
    }

    private void customizeTable(JTable table) {
        table.setFont(new Font("SansSerif", Font.PLAIN, 14));
        table.setRowHeight(30);
        table.setBackground(new Color(250, 250, 250));
        table.setGridColor(new Color(230, 230, 230));
        table.setShowVerticalLines(false);
        table.setShowHorizontalLines(true);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("SansSerif", Font.BOLD, 14));
        header.setBackground(new Color(180, 180, 180));
        header.setForeground(Color.WHITE);
    }

    private void customizeButton(JButton button) {
        button.setFont(new Font("SansSerif", Font.BOLD, 14));
        button.setFocusPainted(false);
        button.setBackground(new Color(100, 150, 200)); 
        button.setForeground(Color.WHITE); 
    }

    private void addTask() {
        String task = taskInput.getText().trim();
        if (!task.isEmpty()) {
            notCompletedModel.addRow(new Object[]{task});
            saveTasks();
            taskInput.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Task cannot be empty");
        }
    }

    private void completeTask(int selectedRow) {
        if (selectedRow == -1 && notCompletedModel.getRowCount() > 0) {
            // If no task is selected, complete the first task in the list
            selectedRow = 0;
        }

        if (selectedRow != -1) {
            String task = (String) notCompletedModel.getValueAt(selectedRow, 0);
            notCompletedModel.removeRow(selectedRow);
            completedModel.addRow(new Object[]{task});
            saveTasks();
        } else {
            JOptionPane.showMessageDialog(this, "No task selected");
        }
    }

    private void cleanHistory() {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to clean the history?", "Confirm Clean History", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int rowCount = completedModel.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                completedModel.removeRow(i);
            }
            saveTasks();
        }
    }

    private void saveTasks() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            writer.write("NotCompleted\n");
            for (int i = 0; i < notCompletedModel.getRowCount(); i++) {
                writer.write(notCompletedModel.getValueAt(i, 0) + "\n");
            }
            writer.write("Completed\n");
            for (int i = 0; i < completedModel.getRowCount(); i++) {
                writer.write(completedModel.getValueAt(i, 0) + "\n");
            }
            System.out.println("Tasks saved to file.");
        } catch (IOException e) {
            System.out.println("Error saving tasks: " + e.getMessage());
        }
    }

    private void loadTasks() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            boolean readingNotCompleted = true;

            while ((line = reader.readLine()) != null) {
                if (line.equals("NotCompleted")) {
                    readingNotCompleted = true;
                } else if (line.equals("Completed")) {
                    readingNotCompleted = false;
                } else if (!line.isEmpty()) {
                    if (readingNotCompleted) {
                        notCompletedModel.addRow(new Object[]{line});
                    } else {
                        completedModel.addRow(new Object[]{line});
                    }
                }
            }
            System.out.println("Tasks loaded from file.");
        } catch (FileNotFoundException e) {
            System.out.println("Task file not found, starting with an empty list.");
        } catch (IOException e) {
            System.out.println("Error loading tasks: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new todoManagement().setVisible(true);
        });
    }
}
